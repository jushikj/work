#!/bin/bash
get_portal_input()
{
    QTIMESTAMP=$(date +%G%m%d_%H%M)
    PORTALVAR=/tmp/clusportal_$USER$QTIMESTAMP.var
    dos2unix -n $1 $PORTALVAR 2>/dev/null
    source $PORTALVAR
}

get_basic_params()
{
    source /opt/gridview/gridviewAppTemplate/CAE/ANSYS/ANSYS.setting

    prefix=`basename $1|awk -F. '{print $1}'`
    pbsfile=${GAP_NAME}.pbs
}

parse_portal_params()
{
    ansys_args=""
    if [ "null$GAP_PBS_OPT" == "null" ];then
        GAP_PBS_OPT=" "
    fi
    if [ "null$GAP_PRE_CMD" == "null" ];then
        GAP_PRE_CMD=" "
    fi
    if [ "null$GAP_POST_CMD" == "null" ];then
        GAP_POST_CMD=" "
    fi
    ##jobname
    if [ "${GAP_OUTPUT}" != "" ];then
        jobname="-j ${GAP_OUTPUT}"
    else
        jobname=""
    fi
    ansys_args="${ansys_args} ${jobname}"

    ## not window
    if [ "$GAP_VNC" == 0 ];then
        ## use custom setting
        if [ "$GAP_USE_CUSTOM_MEM_SET" == 1 ];then
            DATABASE="-db $GAP_DATABASE"
            TOTAO_WORKSPACE="-m $GAP_TOTAL_WORKSPACE"
        else 
            DATABASE=""
            TOTAO_WORKSPACE=""
        fi
    else
        DATABASE=""
        TOTAO_WORKSPACE=""
    fi
    ansys_args="${ansys_args} ${DATABASE} ${TOTAO_WORKSPACE}"


    #product
    PRODUCT="-p ANSYS"
    ansys_args="${ansys_args} ${PRODUCT}"

    #inp file
    if [ "${GAP_INPUT}" != "" ];then
        #FILE=${GAP_INPUT}
        #FILE=${GAP_INPUT##/*/}
        if [ "${GAP_INPUTTYPE}" == "inp" ];then
            dos2unix ${GAP_INPUT} >& /dev/null
            INP_FILE=${GAP_INPUT}
        else
            DB_NAME=${GAP_INPUT%%.*}
            INP_FILE=${DB_NAME}.inp
cat <<EOF >${INP_FILE}
resume,$DB_NAME,db,,,
/solu
SOLVE
y
save,all
finish
EOF
        fi
        INP="-i ${INP_FILE}"
    else
        INP=""
    fi
    ansys_args="${ansys_args} ${INP}"

    ## hpc run option	
    if [ "${GAP_PARAMODE}" == dmp ];then
        GAP_PRE_CMD="${GAP_PRE_CMD}"'hostlist="";for node in `cat $PBS_NODEFILE | uniq`;do num=`cat $PBS_NODEFILE | grep $node | wc -l`;if [ -z $hostlist ];then hostlist=${node}GridViewPortalColon${num};else hostlist=${hostlist}GridViewPortalColon${node}GridViewPortalColon${num};fi;done'

        RUNLIST='-dis -machines ${hostlist}'
    else
        GAP_PRE_CMD="${GAP_PRE_CMD}"'num=`cat $PBS_NODEFILE | wc -l`;'
        RUNLIST='-np $num'
        #no mpi
        MPIINPUT=""
    fi
    ansys_args="${ansys_args} ${RUNLIST}"

    ## remote shell option
    if [ "$GAP_REMOTE_SHELL" == "ssh" ];then
        RSH="-usessh"
    else
        RSH=""
    fi
    ansys_args="${ansys_args} ${RSH}"

    ## gpu acc option
    if [ "${GAP_GPUACC}" = '1' -a "${GAP_GPUTYPE}" != "null" ];then
        GPUACC="-acc ${GAP_GPUTYPE}"
    else
        GPUACC=""
    fi
    ansys_args="${ansys_args} ${GPUACC}"

    ##VNC options
    if [ "$GAP_VNC" == 1 ];then
        VNC_OPTION="-vnc"
        ANSYS_VNC="-g"
    else
        VNC_OPTION=""
        ANSYS_VNC=""
    fi
    ansys_args="${ansys_args} ${ANSYS_VNC}"

    #Ansys working directory
    ansys_args="${ansys_args} -dir ${GAP_WORK_DIR}"
    cd ${GAP_WORK_DIR}

    ## MPI Type optios
    if [ "${GAP_MPIRUNTYPE}" == "pcmpi" ];then
        MPIINPUT="-mpi PCMPI"
    else
        MPIINPUT="-mpi INTELMPI"
    fi
    ansys_args="${ansys_args} ${MPIINPUT}"

}

create_pbs_script()
{
    /opt/gridview/gridviewAppTemplate/createpbs -t serial \
        -pbs ${pbsfile} \
        -name "${GAP_NAME}" \
        -nnodes "${GAP_NNODES}" \
        -ppn "${GAP_PPN}" \
        -o "${GAP_OUTPUT}" \
        -q "${GAP_QUEUE}" \
        -wtime "${GAP_WALL_TIME}" \
        -wdir "${GAP_WORK_DIR}" \
		-precommand "${GAP_PRE_CMD}" \
        -envfile "${ANSYS_ENVFILE}" \
        -prog "${GAP_PROGRAM}" \
        -proarg "${ansys_args}" \
        ${VNC_OPTION}  \
        -postcommand "${GAP_POST_CMD}" \
        -pbsoption "${GAP_PBS_OPT}"
    sed -i 's/GridViewPortalColon/:/g' ${pbsfile}
}

submit_job()
{
    jobid=`qsub $pbsfile`
    return $?
}

clean_tmp_file()
{
    if [ "$debug" != "1" ];then
        rm -f /tmp/${prefix}.var
        rm -f /tmp/${prefix}.runvar
        rm -f $PORTALVAR
    fi
}
output_result()
{
    if [ "$1" == "0" ];then
        echo $jobid | grep "^[0-9]*\.\w*" || exit 1
    else
        echo "Job Submit Error: ${jobid}" && exit 1
    fi
}
main()
{
    get_portal_input $@
    get_basic_params $@
    parse_portal_params
    create_pbs_script
    submit_job
    job_status=$?
    clean_tmp_file
    output_result ${job_status}
}
main "$@"

