#!/bin/bash -x 

get_portal_input()
{
	QTIMESTAMP=`date +%m%d_%H%M`
	PORTALVAR=/tmp/comsol_portal_${USER}_${QTIMESTAMP}.var

	dos2unix -n $1 $PORTALVAR 2>/dev/null
	source $PORTALVAR

	#GAP_COMSOL_NNODES=2
	#GAP_COMSOL_PPN=2
	#GAP_COMSOL_WALL_TIME=1:0:0
	#GAP_COMSOL_QUEUE=high
	#GAP_COMSOL_NAME=VASP_job

	#GAP_COMSOL_PROGRAM=/public/software/vasp/vasp5-ompi
	#GAP_COMSOL_PROGRAM_ARG=(null,'optin')
	#GAP_COMSOL_WORK_DIR=/root
	#GAP_COMSOL_INPUT_MPH
	#GAP_COMSOL_OUTPUT_MPH
	#GAP_COMSOL_OUTPUT=VASP_job.log

	#GAP_COMSOL_VNC=(1,null)

	#GAP_COMSOL_CKECK_POINT=null
	#GAP_COMSOL_INTERVAL=null

	#GAP_COMSOL_PBS_OPT='#PBS -j oe:#PBS -m zj@sugon.com'
	#GAP_COMSOL_PRE_CMD='echo $HOME:echo $USER'
	#GAP_COMSOL_POST_CMD='echo $JOB_ID:echo $PATH'
}

get_basic_params()
{
	source /opt/gridview/gridviewAppTemplate/CAE/COMSOL/COMSOL.setting
	pbsfile=${GAP_NAME}.pbs
  	time=`date +%m%d%H%M%S`
	username = `whoami`
}

parse_portal_params()
{
	dollor=$
	if [ "$GAP_VNC" == 1 ];then
	 VNC_OPTION="-vnc"
	 COMSOL_ARG=" -np ${dollor}NP "
	else
	 VNC_OPTION=""
	 COMSOL_ARG="batch -np ${dollor}NP -inputfile ${GAP_INPUT_MPH} -outputfile ${GAP_OUTPUT_MPH}"
	fi
	cd ${GAP_WORK_DIR}
}

create_pbs_script()
{
	################################################################################################################################################
	#createpbs -t Type [-o logfile] [-pbs pbsfile]
	#        -prog Program  [-proarg Program Argment] 
	#       [-nnodes NodeNum] [-ppn PPN] [-wtime WallTime] [-name JobName] [-wdir WorkDir] [-q queque] [ -pbsoption 'option1:option2: ... :optionN' ]
	#       [-envfile envfile1 envfile2 ... envfileN] 
	#       [-precommand 'command1:command2: ... commandN'] [ -postcommand 'command1:command2: ... :commandN' )
	#       [-vnc]
	#       [-mpirun mpirun command] [-net Network] [-r ssh/rsh] [-bindcore] [-mpiarg MPIRUN Argment] 
	#       [-cri CheckPoint Interval(Minitues)] [-ocpg Old CheckPoint Group name] [-ncpg Old CheckPoint Group name] [-ncp number CheckPoints]
	#       Type should be serial,openmpi,intelmpi cr_mpi, mvapich2,mpich2
	#       Network should be tcp,ib,memory,ib_memory,tcp_memory #
	##############################################################################################################################################

	/opt/gridview/gridviewAppTemplate/createpbs -t serial -o "${GAP_OUTPUT_LOG}" -pbs ${pbsfile} \
	            -prog "${GAP_PROGRAM}" -proarg "${GAP_PROGRAM_ARG}"\
	            -precommand "${GAP_PRE_CMD}" -postcommand "${GAP_POST_CMD}" \
	            ${VNC_OPTION}  \
	            -nnodes   "${GAP_NNODES}" -ppn "${GAP_PPN}" -wtime "${GAP_WALL_TIME}" -name "${GAP_NAME}" -wdir "${GAP_WORK_DIR}" -q "${GAP_QUEUE}"  \
	             -pbsoption "${GAP_PBS_OPT}" \
	            -ncpg '$id.ckps' -cri "${GAP_INTERVAL}" -ncp 2 
}

submit_job()
{
	jobid=`qsub $pbsfile`
	return $?
}

checkpoint_func()
{
  if [ "${GAP_CHECK_POINT}" == 1 ];then
      id=`echo $jobid|awk -F. '{print $1}' `
      echo "Jobid:${id}
      Cr_type:mpi_system
      User_name:`whoami`
      Work_dir:${wdir}
      Job_batch:autocr.${id}.pbs
      Cr_batch:autocr.${id}.pbs
      Cr_interval:${cri}
      Num_CP_save:${ncp}
      " >/checkpoints/autocr/spoolautocr.${id}.Q
    fi
}

clean_tmp_file()
{
    if [ "$debug" != "1" ];then
      rm -f /tmp/${prefix}.var
      rm -f /tmp/${prefix}.runvar
      rm -f $PORTALVAR
    fi
}

output_result()
{
    if [ "$1" == "0" ];then
     echo $jobid | grep "^[0-9]*\.\w*" || exit 1
    else
     echo "Job Submit Error: ${jobid}" && exit 1
    fi
}

main()
{
  get_portal_input $@
  get_basic_params $@
  parse_portal_params
  create_pbs_script
  submit_job
  job_status=$?
  checkpoint_func
  clean_tmp_file
  output_result ${job_status}
}
main "$@"
