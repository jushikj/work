#!/bin/bash 

get_portal_input()
{
	QTIMESTAMP=`date +%G%m%d_%H%M`
	PORTALVAR=/tmp/clusportal_$USER$QTIMESTAMP.var
	dos2unix -n $1 $PORTALVAR 2>/dev/null
	source $PORTALVAR

	
}

get_basic_params()
{
	source /opt/gridview/gridviewAppTemplate/CAE/ABAQUS/ABAQUS.setting
	prefix=`basename $1|awk -F. '{print $1}'`
	time=`date +%m%d%H%M%S`
	username=`whoami`
	pbsfile=${GAP_NAME}.pbs
}

parse_portal_params()
{
    #vnc
    abaqus_args=""
    if [ "$GAP_VNC" == "1" ];then
        VNC_OPTION="-vnc"
        abaqus_args="${abaqus_args} cae"
        return
    fi

    VNC_OPTION=""
    abaqus_args="${abaqus_args} analysis"
    #job name
    abaqus_args="${abaqus_args} job=${GAP_JOB_NAME}"
    #parallel mode
    abaqus_args="${abaqus_args} mp_mode=${GAP_PARALLEL_MODE}"

    #number of domain and explicit precision and parallel mothod
    if [ "${GAP_MODE}" == "explicit" ];then
        parallel="parallel=${GAP_PRALLEL_METHOD}"
        domains="domains=${GAP_NUMBER_DOMAIN}" 
        memory=" "
        #explicit="double=explicit"
        if [ "${GAP_EXPLICIT_PRECISION}" == "single" ];then
            explicit=" "
        elif [ "${GAP_EXPLICIT_PRECISION}" == "fofrce-single/double-off" ];then
            explicit="double=off"
        elif [ "${GAP_EXPLICIT_PRECISION}" == "Double-analysis-only" ];then
            explicit="double=explicit"
        elif [ "${GAP_EXPLICIT_PRECISION}" == "Double-constraints-only" ];then
            explicit="double=constraint"
        elif [ "${GAP_EXPLICIT_PRECISION}" == "Double-analysis+Packager" ];then
            explicit="double=both"
        else
            explicit=" "
        fi

    elif [ "${GAP_MODE}" == "standard" ];then
        parallel=" "
        explicit=" "
        domains=" "
        if [ "${GAP_MAX_MEMORY_T}" == "%" ];then
            memory="memory=\"${GAP_MAX_MEMORY}${GAP_MAX_MEMORY_T}\"" #90%
        else
            memory="memory=\"${GAP_MAX_MEMORY} ${GAP_MAX_MEMORY_T}\"" #2 GB
        fi
    else
        parallel=" "
        explicit=" "
        number_domain=" "
        memory=" "
    fi
    abaqus_args="${abaqus_args} ${memory} ${parallel} ${domains} ${explicit}"

    #output precision
    abaqus_args="${abaqus_args} output_precision=${GAP_OUTPUT_PRECISION}"


    # input file
    if [ "${GAP_INPUT}" != "" ];then
        FILE=${GAP_INPUT}
        FILE=${FILE##/*/}
        dos2unix ${FILE} >& /dev/null &
        INPUT=${FILE}
        INP="input=${INPUT}"
        abaqus_args="${abaqus_args} input=${INPUT}"
    fi

    #cpus
    ncpus=$[${GAP_PPN} * ${GAP_NNODES}]
    abaqus_args="${abaqus_args} cpus=${ncpus}"

    #GPU
    if [ "${GAP_GPU}" == "1" ];then
        abaqus_args="${abaqus_args} gpu=NVIDIA"
    fi
    abaqus_args="${abaqus_args} ${GAP_PROGRAM_ARG} interactive"

    ## hpc run option	
    PRECMD='hostlist="";
    for node in $(cat ${PBS_NODEFILE} | uniq);do
        num=$(cat $PBS_NODEFILE | grep $node | wc -l);
        if [ -z $hostlist ];then
            hostlist=['"\\'\$node\\'"',$num]; 
        else
            hostlist=$hostlist,['"\\'\$node\\'"',$num]; 
        fi;
    done;
    hostlist=[$hostlist];'
    PRECMD2='echo mp_host_list=${hostlist} > abaqus_v6.env'

    cd ${GAP_WORK_DIR}

    if [ "null$GAP_PBS_OPT" == "null" ];then
        GAP_PBS_OPT=" "
    fi
    if [ "null$GAP_PRE_CMD" == "null" ];then
        GAP_PRE_CMD=" "
    fi
    if [ "null$GAP_POST_CMD" == "null" ];then
        GAP_POST_CMD=" "
    fi

}

create_pbs_script()
{


    /opt/gridview/gridviewAppTemplate/createpbs -t serial \
    -o "${GAP_OUTPUT}" \
    -pbs ${pbsfile} \
    -precommand "${GAP_PRE_CMD} ${PRECMD} ${PRECMD2}" \
    -prog "${GAP_PROGRAM}" \
    -proarg "${abaqus_args}" \
    -envfile "${ABAQUS_ENVFILE}" \
    ${VNC_OPTION}  \
    -nnodes   "${GAP_NNODES}" \
    -ppn "${GAP_PPN}" \
    -wtime "${GAP_WALL_TIME}" \
    -name "${GAP_NAME}" \
    -wdir "${GAP_WORK_DIR}" \
    -q "${GAP_QUEUE}" \
    -postcommand "${GAP_POST_CMD}" \
    -pbsoption "${GAP_PBS_OPT}"
}

submit_job(){
    jobid=`qsub $pbsfile`
    return $?
}

clean_tmp_file()
{
    if [ "$debug" != "1" ];then
    	rm -f /tmp/${prefix}.var
    	rm -f /tmp/${prefix}.runvar
    	rm -f $PORTALVAR
    fi
}
output_result()
{
    if [ "$1" == "0" ];then
	   echo $jobid | grep "^[0-9]*\.\w*" || exit 1
    else
	   echo "Job Submit Error: ${jobid}" && exit 1
    fi
}
main()
{
    get_portal_input $@
    get_basic_params $@
    parse_portal_params
    create_pbs_script
    submit_job
    job_status=$?
    clean_tmp_file
    output_result ${job_status}
}
main "$@"