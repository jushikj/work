#!/bin/bash -x
get_portal_input()
{
    QTIMESTAMP=`date +%G%m%d_%H%M`
    PORTALVAR=/tmp/clusportal_$USER$QTIMESTAMP.var 
    dos2unix -n $1 $PORTALVAR 2>/dev/null
    source $PORTALVAR
}
create_jou_file()
{
    jou_file_path="${GAP_WORK_DIR}/${GAP_JOU_FILE}"
    touch ${jou_file_path}
    if [ "${GAP_TIME}" == "steady" ];then
cat <<EOF >${jou_file_path}
/file/rc ${GAP_CAS_FILE}
/parallel/timer/reset 
/solve/iterate ${GAP_NUM_ITERATIONS} 
/parallel/timer/usage 
/file/wd ${GAP_DATA_SAVE} 
ok 
exit
EOF
    else
cat <<EOF > ${jou_file_path}
/file/rc ${GAP_CAS_FILE} 
/parallel/timer/reset 
/file/auto-save/data-frequency ${GAP_AUTO_SAVE_TIME_STEP}
/solve/set/time-step ${GAP_TIME_STEP}
/solve/dual-time-iterate ${GAP_NUM_TIME_STEP} ${GAP_MAX_ITERATIONS}
/parallel/timer/usage
/file/write-data ${jou_file_path%.*}_${GAP_TIME}_"end.dat"
ok 
exit
EOF
    fi
#	echo "/file/rc ${GAP_CAS_FILE}
#/parallel/timer/reset 
#/solve/iterate ${GAP_NUM_ITERATIONS} 
#/parallel/timer/usage 
#/file/wd ${GAP_DATA_SAVE} 
#ok 
#exit" >${jou_file_path}
#	echo "/file/rc ${GAP_CAS_FILE} 
#/parallel/timer/reset 
#/file/auto-save/data-frequency ${GAP_AUTO_SAVE_TIME_STEP}
#/solve/set/time-step ${GAP_TIME_STEP}
#/solve/dual-time-iterate ${GAP_NUM_TIME_STEP} ${GAP_MAX_ITERATIONS}
#/parallel/timer/usage
#/file/write-data ${jou_file_path%.*}_${GAP_TIME}_"end.dat"
#ok 
#exit" >${jou_file_path}
}
get_basic_params()
{
    source /opt/gridview/gridviewAppTemplate/CAE/FLUENT/FLUENT.setting
    prefix=`basename $1|awk -F. '{print $1}'`
    time=`date +%m%d%H%M%S`
    username=`whoami`
    pbsfile=${GAP_NAME}.pbs
}
parse_portal_params()
{
    #vnc
    if [ "$GAP_VNC" == 1 ];then
    	VNC_OPTION="-vnc"
    	FLUENT_VNC=""
    else
    	VNC_OPTION=""
    	FLUENT_VNC="-g"
    fi
    #remote shell
    if [ "$GAP_REMOTE_SHELL" == ssh ];then
	   rsh_option="-ssh"
    else
	   rsh_option=""
    fi
    #pbs opt
    if [ "null$GAP_PBS_OPT" == "null" ];then
	   GAP_PBS_OPT=" "
    fi
    #pre cmd
    if [ "null$GAP_PRE_CMD" == "null" ];then
	   GAP_PRE_CMD=" "
    fi
    #post cmd
    if [ "null$GAP_POST_CMD" == "null" ];then
	   GAP_POST_CMD=" "
    fi
    #pbs work directory
    if [ "${GAP_WORK_DIR}" == "" ];then
	   GAP_WORK_DIR=$(readlink -f ~)
    fi

    #dimension and precision
    if [ "${GAP_PRECISION}" == "double" ];then
        GAP_DIMENSION_PRECISION="${GAP_DIMENSION}dp"
    else
        GAP_DIMENSION_PRECISION="${GAP_DIMENSION}"
    fi
    cd ${GAP_WORK_DIR}
}

create_pbs_script()
{
    ##############################################################################################################################    ######################
    #createpbs -t Type [-o logfile] [-pbs pbsfile]
    #        -prog Program  [-proarg Program Argment]
    #       [-nnodes NodeNum] [-ppn PPN] [-wtime WallTime] [-name JobName] [-wdir WorkDir] [-q queque] [ -pbsoption 'opti    on1:o    ption2: ... :optionN' ]
    #       [-envfile envfile1 envfile2 ... envfileN]
    #       [-precommand 'command1...command2: ... commandN'] [ -postcommand 'command1...command2: ... :commandN' )
    #       [-vnc]
    #       [-mpirun mpirun command] [-net Network] [-r ssh/rsh] [-bindcore] [-mpiarg MPIRUN Argment]
    #       [-cri CheckPoint Interval(Minitues)] [-ocpg Old CheckPoint Group name] [-ncpg Old CheckPoint Group name] [-nc    p num    ber CheckPoints]
    #       Type should be serial,openmpi,intelmpi cr_mpi, mvapich2,mpich2
    #       Network should be tcp,ib,memory,ib_memory,tcp_memory #
    ##############################################################################################################################    ####################
    dollor=$
    /opt/gridview/gridviewAppTemplate/createpbs -t serial -o "${GAP_OUTPUT}" -pbs ${pbsfile} \
		-prog "${GAP_PROGRAM}" \
		-proarg "${GAP_DIMENSION_PRECISION} ${FLUENT_VNC} -t${dollor}NP -cnf=${dollor}PBS_NODEFILE ${rsh_option} -mpi=${GAP_MPI_TYPE} ${GAP_PROGRAM_ARG} -i ${GAP_INPUT}" \
		-envfile  "${Fluent_ENVFILE}"     \
		-precommand "${GAP_PRE_CMD}" -postcommand "${GAP_POST_CMD}" \
		${VNC_OPTION}  \
		-nnodes   "${GAP_NNODES}" -ppn "${GAP_PPN}" -wtime "${GAP_WALL_TIME}" -name "${GAP_NAME}" -wdir "${GAP_WORK_DIR}" -q "${GAP_QUEUE}"  \
		-pbsoption "${GAP_PBS_OPT}" \
		-ncpg '$id.ckps' -cri "${GAP_INTERVAL}" -ncp 2
}
submit_job()
{
    jobid=$(qsub $pbsfile)
    return $?
}
checkpoint_func()
{
    if [ "${GAP_CHECK_POINT}" == 1 ];then
	    id=`echo $jobid|awk -F. '{print $1}' `
    	echo "Jobid:${id}
    	Cr_type:mpi_system
    	User_name:`whoami`
    	Work_dir:${wdir}
    	Job_batch:autocr.${id}.pbs
    	Cr_batch:autocr.${id}.pbs
    	Cr_interval:${cri}
    	Num_CP_save:${ncp}
    	" >/checkpoints/autocr/spoolautocr.${id}.Q
    fi
}
clean_tmp_file()
{
    if [ "$debug" != "1" ];then
    	rm -f $pbsfile
    	rm -f /tmp/${prefix}.var
    	rm -f /tmp/${prefix}.runvar
    	rm -f $PORTALVAR
    fi
}
output_result()
{
    if [ "$1" == "0" ];then
	   echo $jobid | grep "^[0-9]*\.\w*" || exit 1
    else
	   echo "Job Submit Error: ${jobid}" && exit 1
    fi
}
main()
{
    get_portal_input $@
    create_jou_file
    get_basic_params $@
    parse_portal_params
    create_pbs_script
    submit_job
    job_status=$?
    checkpoint_func
    clean_tmp_file
    output_result ${job_status}
}
main "$@"
