# maui server's hostname 
MAUI_SERVER=vnode123
# path of maui.cfg
MAUI_CFG="/opt/gridview/pbs/dispatcher-sched/maui.cfg"
# path of qstat command
QSTAT="/opt/gridview/pbs/dispatcher/bin/qstat"

# temporary CFG file
TMP_PBS_CFG=/tmp/pbs_cfg.$$
TMP_MAUI_CFG=/tmp/maui_cfg.$$

# functions
# print usage info
usage()
{
	echo "pbscheck [--user <username>] 
         [--queue <queue>] 
         [--walltime <hh:mm:ss>] 
         [--nodes <N>]
         [--ncpus <N>]"
	exit -1
}

# print error message and exit with status -1
die()
{
	echo -e "Error: $*" 1>&2
        rm -rf $TMP_PBS_CFG
        rm -rf $TMP_MAUI_CFG
	exit -1
}

# print warning message
warn()
{
	echo -e "Warning: $*"
}

# file/directory check, eg., test_file -f $SCHEDCFG
test_file() {
	local hn=`hostname`
	if [ "X$hn" == "X$MAUI_SERVER" ]; then
		test $1 $2
	else
		ssh $MAUI_SERVER test $1 $2
	fi
}
cat_file() {
	local hn=`hostname`
	if [ "X$hn" == "X$MAUI_SERVER" ]; then
		cat $*
	else
		ssh $MAUI_SERVER cat $*
	fi
}

# find the min/max from a column of numbers
find_min()
{
   awk '{if(min==""){min=$1}; if($1!="" && $1<min) {min=$1};} END {print min}'
}
find_max()
{
   awk '{if(max==""){max=$1}; if($1!="" && $1>max) {max=$1};} END {print max}'
}

# get default queue, in case that user does not specify a queue name
get_default_queue()
{
	$QSTAT -Bf1 | grep 'default_queue' | awk '{print $3}'
        return 0
}

# check if the queue exists
check_queue_exist()
{
	if $QSTAT -Qf1 | grep "Queue: \<$1\>" >&/dev/null; then
           return 0
        else
           return -1
        fi
}

# get queue infomation:
get_queue_info()
{
   CK_QUEUE_PBS_TYPE=`grep 'queue_type' $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_ENABLED=`grep 'enabled' $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_STARTED=`grep 'started' $TMP_PBS_CFG | awk '{print $3}'`
   
   CK_QUEUE_PBS_ACL_USER_ENABLE=`grep 'acl_user_enable' $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_ACL_USERS=`grep 'acl_users' $TMP_PBS_CFG | awk '{print $3}'`
   
   CK_QUEUE_PBS_MAX_NODES=`grep 'resources_max.nodect' $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_MIN_NODES=`grep 'resources_min.nodect' $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_MAX_NCPUS=`grep 'resources_max.ncpus'  $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_MIN_NCPUS=`grep 'resources_min.ncpus'  $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_MAX_WALLTIME=`grep 'resources_max.walltime' $TMP_PBS_CFG | awk '{print $3}'`
   CK_QUEUE_PBS_MIN_WALLTIME=`grep 'resources_min.walltime' $TMP_PBS_CFG | awk '{print $3}'`

   CK_QUEUE_MAUI_MAX_NODES=`grep "CLASSCFG\[$CK_QUEUE\]" $TMP_MAUI_CFG \
                          | grep -o "MAXNODE\[USER:$CK_USER\]=[0-9]*"| awk -F= '{print $2}'`
   if [ -z "$CK_QUEUE_MAUI_MAX_NODES" ]; then
      CK_QUEUE_MAUI_MAX_NODES=`grep "CLASSCFG\[$CK_QUEUE\]" $TMP_MAUI_CFG \
                          | grep -o "MAXNODE[^=]*=[0-9]*"| awk -F= '{print $2}' | find_min` 
   fi
   if [ -z "$CK_QUEUE_MAUI_MAX_NODES" ]; then
      CK_QUEUE_MAUI_MAX_NODES=`grep "CLASSCFG\[DEFAULT\]" $TMP_MAUI_CFG \
                             | grep -o "MAXNODE\[USER:$CK_USER\]=[0-9]*"| awk -F= '{print $2}'`
   fi
   if [ -z "$CK_QUEUE_MAUI_MAX_NODES" ]; then
      CK_QUEUE_MAUI_MAX_NODES=`grep "CLASSCFG\[DEFAULT\]" $TMP_MAUI_CFG \
                          | grep -o "MAXNODE[^=]*=[0-9]*"| awk -F= '{print $2}' | find_min` 
   fi

   CK_QUEUE_MAUI_MAX_NCPUS=`grep "CLASSCFG\[$CK_QUEUE\]" $TMP_MAUI_CFG \
                          | grep -o "MAXPROC\[USER:$CK_USER\]=[0-9]*"| awk -F= '{print $2}'`
   if [ -z "$CK_QUEUE_MAUI_MAX_NCPUS" ]; then
      CK_QUEUE_MAUI_MAX_NCPUS=`grep "CLASSCFG\[$CK_QUEUE\]" $TMP_MAUI_CFG \
                          | grep -o "MAXPROC[^=]*=[0-9]*"| awk -F= '{print $2}' | find_min` 
   fi
   if [ -z "$CK_QUEUE_MAUI_MAX_NCPUS" ]; then
      CK_QUEUE_MAUI_MAX_NCPUS=`grep "CLASSCFG\[DEFAULT\]" $TMP_MAUI_CFG \
                             | grep -o "MAXPROC\[USER:$CK_USER\]=[0-9]*"| awk -F= '{print $2}'`
   fi
   if [ -z "$CK_QUEUE_MAUI_MAX_NCPUS" ]; then
      CK_QUEUE_MAUI_MAX_NCPUS=`grep "CLASSCFG\[DEFAULT\]" $TMP_MAUI_CFG \
                          | grep -o "MAXPROC[^=]*=[0-9]*"| awk -F= '{print $2}' | find_min` 
   fi
}

#get user infomation
get_user_info()
{
   CK_USER_MAUI_MAX_NODES=`grep "USERCFG\[$CK_USER\]" $TMP_MAUI_CFG \
                          | grep -o "MAXNODE=[0-9]*"| awk -F= '{print $2}'`
   if [ -z "$CK_USER_MAUI_MAX_NODES" ]; then
      CK_USER_MAUI_MAX_NODES=`grep "USERCFG\[DEFAULT\]" $TMP_MAUI_CFG \
                            | grep -o "MAXNODE=[0-9]*"| awk -F= '{print $2}'`
   fi

   CK_USER_MAUI_MAX_NCPUS=`grep "USERCFG\[$CK_USER\]" $TMP_MAUI_CFG \
                          | grep -o "MAXPROC=[0-9]*"| awk -F= '{print $2}'`
   if [ -z "$CK_USER_MAUI_MAX_NCPUS" ]; then
      CK_USER_MAUI_MAX_NCPUS=`grep "USERCFG\[DEFAULT\]" $TMP_MAUI_CFG \
                            | grep -o "MAXPROC=[0-9]*"| awk -F= '{print $2}'`
   fi
}

# check queue limits
check_queue_status()
{
	if [ "$CK_QUEUE_PBS_TYPE" != "Execution" ]; then
           die "Queue \"$CK_QUEUE\" is not an execution queue!"
	fi

	if [ "$CK_QUEUE_PBS_ENABLED" = "False" -o "$CK_QUEUE_PBS_STARTED" = "False" ]; then
           die "Queue \"$CK_QUEUE\" is disabled!"
        fi 

        if [ "$CK_QUEUE_PBS_ACL_USER_ENABLE" = "True" ]; then
           echo $CK_QUEUE_PBS_ACL_USERS | grep "\<$CK_USER\>" >&/dev/null
           if [ $? -ne 0 ]; then
              die "user \"$CK_USER\" is not allowed to use queue \"$CK_QUEUE\"!"
           fi
        fi
}

# exchange walltime format, eg., "01:00:00" into "60 sec"
walltime_exchange() {
        local wt=0
        local hour=""
        local min=""
        local sec=""
        local wtNF=`echo $1 | awk -F: '{print NF}'`
        if [ $wtNF -eq 3 ]; then
            hour=`echo $1 | awk -F: '{print $1}'`
            min=`echo $1 | awk -F: '{print $2}'`
            sec=`echo $1 | awk -F: '{print $3}'`
        elif [ $wtNF -eq 2 ]; then
            min=`echo $1 | awk -F: '{print $1}'`
            sec=`echo $1 | awk -F: '{print $2}'`
        else
            sec=`echo $1 | awk -F: '{print $1}'`
        fi
        local wt=0
        local tmp=0
        if [ "X$hour" != "X" ]; then
            (( hour = hour * 3600 ))
            (( wt = wt + hour ))
        fi
        if [ "X$min" != "X" ]; then
            (( min = min * 60 ))
            (( wt = wt + min ))
        fi
        if [ "X$sec" != "X" ]; then
            (( wt = wt + sec ))
        fi
        echo "$wt"
        return 0
}

# check the walltime limited by queue
check_walltime()
{
        if [ -n "$CK_QUEUE_PBS_MAX_WALLTIME" ]; then
	   local user=`walltime_exchange $CK_WALLTIME`
	   local system=`walltime_exchange $CK_QUEUE_PBS_MAX_WALLTIME`
           if [ $user -gt $system ]; then
              die "the requested walltime exceeded the queue limit ($CK_QUEUE_PBS_MAX_WALLTIME)"
           fi
        fi
        if [ -n "$CK_QUEUE_PBS_MIN_WALLTIME" ]; then
	   local user=`walltime_exchange $CK_WALLTIME`
	   local system=`walltime_exchange $CK_QUEUE_PBS_MIN_WALLTIME`
           if [ $user -lt $system ]; then
              die "the requested walltime must be longer than the queue lower limit ($CK_QUEUE_PBS_MIN_WALLTIME)"
           fi
        fi
}

# check the ncpus limited by queue and maui
check_ncpus()
{
	upper=`echo -e "$CK_QUEUE_PBS_MAX_NCPUS \n $CK_QUEUE_MAUI_MAX_NCPUS \n $CK_USER_MAUI_MAX_NCPUS" | find_min`
	lower="$CK_QUEUE_PBS_MIN_NCPUS"

        if [ -n "$upper" ]; then
           if [ $CK_NCPUS -gt $upper ]; then
              die "the requested number of cores exceeded the system limit ($upper)"
           fi
        fi
        if [ -n "$lower" ]; then
           if [ $CK_NCPUS -lt $lower ]; then
              die "the requested number of cores must be larger than the system lower limit ($lower)."
           fi
        fi
}

# check the nodes limited by queue and maui
check_nodes()
{
	upper=`echo -e "$CK_QUEUE_PBS_MAX_NODES \n $CK_QUEUE_MAUI_MAX_NODES \n $CK_USER_MAUI_MAX_NODES" | find_min`
	lower="$CK_QUEUE_PBS_MIN_NODES"

        if [ -n "$upper" ]; then
           if [ $CK_NODES -gt $upper ]; then
              die "the requested number of nodes exceeded the system limit ($upper)"
           fi
        fi
        if [ -n "$lower" ]; then
           if [ $CK_NODES -lt $lower ]; then
              die "the requested number of nodes must be larger than the system lower limit ($lower)."
           fi
        fi
}
#== Utility functions END ==


#== Process command line arguments ==
if [ $# -eq 0 ]; then
   usage
fi

until [ $# -eq 0 ]
do
   case "$1" in
   --user)
       if ! echo $2 | grep '^--' >&/dev/null; then
          CK_USER=$2
          shift
       fi
       ;;
   --queue)
       if ! echo $2 | grep '^--' >&/dev/null; then
          CK_QUEUE=$2
          shift
       fi
       ;;
   --walltime)
       if ! echo $2 | grep '^--' >&/dev/null; then
          CK_WALLTIME=$2
          shift
       fi
       ;;
   --nodes)
       if ! echo $2 | grep '^--' >&/dev/null; then
          CK_NODES=$2
          shift
       fi
       ;;
   --ncpus)
       if ! echo $2 | grep '^--' >&/dev/null; then
          CK_NCPUS=$2
          shift
       fi
       ;;
   *)
       usage
       ;;
   esac
   shift
done

# check if qstat work properly
if [ ! -f $QSTAT ]; then
   die "$QSTAT does not exist!"
fi
if ! $QSTAT >&/dev/null; then
   die "PBS works badly!"
fi

# check maui config file
if ! test_file -f $MAUI_CFG; then
   die "$MAUI_CFG does not exist!"
fi

# check valid username
if [ -z "$CK_USER" ]; then
   CK_USER=`whoami`
fi
if ! `id $CK_USER >&/dev/null`; then
   die "User \"$CK_USER\" dose not exist!"
fi

# check valid queue name
if [ -z "$CK_QUEUE" ]; then
   CK_QUEUE=`get_default_queue`
fi
if ! check_queue_exist $CK_QUEUE; then
   die "Queue \"$CK_QUEUE\" dose not exist!"
fi

# write queue-specific PBS config file and temp maui config file
$QSTAT -Qf1 $CK_QUEUE >$TMP_PBS_CFG
cat_file $MAUI_CFG    >$TMP_MAUI_CFG

# dump the queue and user info
get_queue_info
get_user_info

# check if the queue is available
check_queue_status

# check walltime
if [ -n "$CK_WALLTIME" ]; then
   check_walltime
fi

# check ncpus
if [ -n "$CK_NCPUS" ]; then
   check_ncpus
fi

# check nodes
if [ -n "$CK_NODES" ]; then
   check_nodes
fi

rm -rf $TMP_PBS_CFG $TMP_MAUI_CFG
exit 0
